--// Vars \\--
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local LockedTarget = nil

_G.AimLockEnabled = false -- Start disabled
_G.FOVEnabled = false -- Start disabled
_G.AimPart = "Head"
_G.Sensitivity = 0.2
_G.PredictionEnabled = false -- Start disabled
_G.PredictionTime = 0.1 -- Initial prediction time
_G.JumpStrengthEnabled = false -- Start disabled
_G.WalkSpeedEnabled = false -- Start disabled
_G.JumpPower = 50 -- Default jump power
_G.WalkSpeed = 16 -- Default walk speed

_G.CircleSides = 64
_G.CircleColor = Color3.fromRGB(255, 0, 0) -- Red when disabled
_G.CircleTransparency = 0.7
_G.CircleRadius = 80
_G.CircleFilled = false
_G.CircleVisible = false -- Start hidden
_G.CircleThickness = 0

local AimParts = {
    Head = "Head",
    Chest = "UpperTorso",
    Legs = "LowerTorso"
}

local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = _G.CircleRadius
FOVCircle.Filled = _G.CircleFilled
FOVCircle.Color = _G.CircleColor
FOVCircle.Visible = _G.CircleVisible
FOVCircle.Transparency = _G.CircleTransparency
FOVCircle.Thickness = _G.CircleThickness

local TargetLabel = Instance.new("TextLabel")
TargetLabel.Parent = game.CoreGui
TargetLabel.Size = UDim2.new(0, 200, 0, 50)
TargetLabel.Position = UDim2.new(1, -200, 1, -50)
TargetLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TargetLabel.BackgroundTransparency = 0.5
TargetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetLabel.TextSize = 14
TargetLabel.Font = Enum.Font.SourceSansBold
TargetLabel.Text = "No Target Locked"
TargetLabel.Visible = true

local function GetClosestPlayer()
    local MaximumDistance = _G.CircleRadius
    local Target = nil

    for _, v in next, Players:GetPlayers() do
        if v.Name ~= LocalPlayer.Name and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local ScreenPoint = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
            local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude

            if VectorDistance < MaximumDistance then
                Target = v
                MaximumDistance = VectorDistance
            end
        end
    end

    return Target
end

local function PredictPosition(target)
    local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
    if targetRoot then
        local velocity = targetRoot.Velocity
        local predictedPosition = targetRoot.Position + (velocity * _G.PredictionTime)
        return predictedPosition
    end
    return target.Character[_G.AimPart].Position
end

local function setJumpPower(power)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid").JumpPower = power
    end
end

local function setWalkSpeed(speed)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = math.min(speed, 500) -- Adjusted the maximum speed
    end
end

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == Enum.KeyCode.Q then
        if _G.AimLockEnabled then
            if LockedTarget == nil then
                LockedTarget = GetClosestPlayer()
                if LockedTarget then
                    TargetLabel.Text = "Locked On: " .. LockedTarget.Name
                end
            else
                LockedTarget = nil
                TargetLabel.Text = "No Target Locked"
            end
        end
    end
end)

RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    FOVCircle.Radius = _G.CircleRadius
    FOVCircle.Filled = _G.CircleFilled
    FOVCircle.Color = _G.CircleColor
    FOVCircle.Visible = _G.CircleVisible
    FOVCircle.Transparency = _G.CircleTransparency
    FOVCircle.Thickness = _G.CircleThickness

    if _G.AimLockEnabled and LockedTarget and LockedTarget.Character and LockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local aimPosition = LockedTarget.Character[_G.AimPart].Position
        if _G.PredictionEnabled then
            aimPosition = PredictPosition(LockedTarget)
        end
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, aimPosition)
    end
    
    if _G.JumpStrengthEnabled then
        setJumpPower(_G.JumpPower)
    end
    
    if _G.WalkSpeedEnabled then
        setWalkSpeed(_G.WalkSpeed)
    end
end)

-- Load Fluent UI Library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Aim Control",
    SubTitle = "discord.gg/t6UgyY65",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Crimson",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "list" })
}

-- Main Tab
local AimLockToggle = Tabs.Main:AddToggle("AimLockToggle", {Title = "Enable Aim Lock", Default = _G.AimLockEnabled})
AimLockToggle:OnChanged(function(value)
    _G.AimLockEnabled = value
    if value then
        TargetLabel.Text = "No Target Locked"
    else
        TargetLabel.Text = ""
        LockedTarget = nil
    end
end)

local SensitivitySlider = Tabs.Main:AddSlider("SensitivitySlider", {
    Title = "Adjust Sensitivity",
    Min = 0.1,
    Max = 1,
    Default = _G.Sensitivity,
    Rounding = 2,
    Step = 0.01,
    Callback = function(value)
        _G.Sensitivity = value
    end
})

local FOVToggle = Tabs.Main:AddToggle("FOVToggle", {Title = "Enable FOV", Default = _G.FOVEnabled})
FOVToggle:OnChanged(function(value)
    _G.FOVEnabled = value
    _G.CircleVisible = value
end)

local FOVRadiusSlider = Tabs.Main:AddSlider("FOVRadiusSlider", {
    Title = "Adjust FOV Radius",
    Min = 50,
    Max = 500,
    Default = _G.CircleRadius,
    Rounding = 0,
    Step = 10,
    Callback = function(value)
        _G.CircleRadius = value
    end
})

-- Add Jump Strength and Walk Speed settings under Adjust FOV Radius
local JumpStrengthToggle = Tabs.Main:AddToggle("JumpStrengthToggle", {Title = "Enable Jump Strength", Default = _G.JumpStrengthEnabled})
JumpStrengthToggle:OnChanged(function(value)
    _G.JumpStrengthEnabled = value
end)

local JumpPowerSlider = Tabs.Main:AddSlider("JumpPowerSlider", {
    Title = "Adjust Jump Power",
    Min = 0,
    Max = 500, -- Adjusted the maximum value to 500
    Default = _G.JumpPower,
    Rounding = 0,
    Step = 1,
    Callback = function(value)
        _G.JumpPower = value
        setJumpPower(value)
    end
})

local WalkSpeedToggle = Tabs.Main:AddToggle("WalkSpeedToggle", {Title = "Enable Walk Speed", Default = _G.WalkSpeedEnabled})
WalkSpeedToggle:OnChanged(function(value)
    _G.WalkSpeedEnabled = value
end)

local WalkSpeedSlider = Tabs.Main:AddSlider("WalkSpeedSlider", {
    Title = "Adjust Walk Speed",
    Min = 16,
    Max = 500, -- Adjusted the maximum value to 500
    Default = _G.WalkSpeed,
    Rounding = 0,
    Step = 1,
    Callback = function(value)
        _G.WalkSpeed = value
        setWalkSpeed(value)
    end
})

local CircleColorPicker = Tabs.Main:AddColorPicker("CircleColorPicker", {
    Title = "Circle Color",
    Default = _G.CircleColor,
    Callback = function(value)
        _G.CircleColor = value
    end
})

local PredictionToggle = Tabs.Main:AddToggle("PredictionToggle", {Title = "Enable Prediction", Default = _G.PredictionEnabled})
PredictionToggle:OnChanged(function(value)
    _G.PredictionEnabled = value
    print("Prediction Toggle Value:", value) -- Debugging statement
end)

local PredictionTimeSlider = Tabs.Main:AddSlider("PredictionTimeSlider", {
    Title = "Adjust Prediction Time",
    Min = 0.01,
    Max = 0.2,
    Default = _G.PredictionTime,
    Rounding = 2,
    Step = 0.01,
    Callback = function(value)
        _G.PredictionTime = value
        print("Prediction Time Slider Value:", value) -- Debugging statement
    end
})

-- Ensure GUI Pops Up
Fluent:Ready()
