--// Vars \--
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local LockedTarget = nil

_G.AimLockEnabled = false -- Start disabled
_G.FOVEnabled = false -- Start disabled
_G.AimPart = "Head"
_G.Sensitivity = 0.2
_G.PredictionEnabled = false -- Start disabled
_G.PredictionTime = 0.1 -- Initial prediction time
_G.JumpStrengthEnabled = false -- Start disabled
_G.WalkSpeedEnabled = false -- Start disabled
_G.JumpPower = 50 -- Default jump power
_G.WalkSpeed = 16 -- Default walk speed
_G.ESPToggleEnabled = false -- ESP starts disabled

_G.CircleSides = 64
_G.CircleColor = Color3.fromRGB(255, 0, 0) -- Red when disabled
_G.CircleTransparency = 0.7
_G.CircleRadius = 80
_G.CircleFilled = false
_G.CircleVisible = false -- Start hidden
_G.CircleThickness = 0

local AimParts = {
    Head = "Head",
    Chest = "UpperTorso",
    Legs = "LowerTorso"
}

local FOVCircle = Drawing.new("Circle")
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Radius = _G.CircleRadius
FOVCircle.Filled = _G.CircleFilled
FOVCircle.Color = _G.CircleColor
FOVCircle.Visible = _G.CircleVisible
FOVCircle.Transparency = _G.CircleTransparency
FOVCircle.Thickness = _G.CircleThickness

local TargetLabel = Instance.new("TextLabel")
TargetLabel.Parent = game.CoreGui
TargetLabel.Size = UDim2.new(0, 200, 0, 50)
TargetLabel.Position = UDim2.new(1, -200, 1, -50)
TargetLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
TargetLabel.BackgroundTransparency = 0.5
TargetLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TargetLabel.TextSize = 14
TargetLabel.Font = Enum.Font.SourceSansBold
TargetLabel.Text = "No Target Locked"
TargetLabel.Visible = true

-- ESP Functionality Implementation
local function toggleESP(enabled)
    if enabled then
        -- Define ESP settings
        local FillColor = Color3.fromRGB(175, 25, 255)
        local DepthMode = "AlwaysOnTop"
        local FillTransparency = 0
        local OutlineColor = Color3.fromRGB(255, 255, 255)
        local OutlineTransparency = 0

        local CoreGui = game:FindService("CoreGui")
        local Players = game:FindService("Players")
        local connections = {}

        local Storage = Instance.new("Folder")
        Storage.Parent = CoreGui
        Storage.Name = "Highlight_Storage"

        local function Highlight(plr)
            local Highlight = Instance.new("Highlight")
            Highlight.Name = plr.Name
            Highlight.FillColor = FillColor
            Highlight.DepthMode = DepthMode
            Highlight.FillTransparency = FillTransparency
            Highlight.OutlineColor = OutlineColor
            Highlight.OutlineTransparency = OutlineTransparency
            Highlight.Parent = Storage

            local plrchar = plr.Character
            if plrchar then
                if plr ~= game.Players.LocalPlayer then
                    Highlight.Adornee = plrchar
                end
            end

            connections[plr] = plr.CharacterAdded:Connect(function(char)
                Highlight.Adornee = char
            end)
        end

        Players.PlayerAdded:Connect(Highlight)
        for _, v in next, Players:GetPlayers() do
            if v ~= game.Players.LocalPlayer then
                Highlight(v)
            end
        end

        Players.PlayerRemoving:Connect(function(plr)
            local plrname = plr.Name
            if Storage[plrname] then
                Storage[plrname]:Destroy()
            end
            if connections[plr] then
                connections[plr]:Disconnect()
            end
        end)
    else
        local highlightStorage = game.CoreGui:FindFirstChild("Highlight_Storage")
        if highlightStorage then
            highlightStorage:Destroy()
        end
    end
end

-- Load Fluent UI Library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local Window = Fluent:CreateWindow({
    Title = "Aim Control",
    SubTitle = "discord.gg/t6UgyY65",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Crimson",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "list" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" })
}

-- Main Tab
local AimLockToggle = Tabs.Main:AddToggle("AimLockToggle", {Title = "Enable Aim Lock", Default = _G.AimLockEnabled})
AimLockToggle:OnChanged(function(value)
    _G.AimLockEnabled = value
    if value then
        TargetLabel.Text = "No Target Locked"
    else
        TargetLabel.Text = ""
        LockedTarget = nil
    end
end)

local SensitivitySlider = Tabs.Main:AddSlider("SensitivitySlider", {
    Title = "Adjust Sensitivity",
    Min = 0.1,
    Max = 1,
    Default = _G.Sensitivity,
    Rounding = 2,
    Step = 0.01,
    Callback = function(value)
        _G.Sensitivity = value
    end
})

local FOVToggle = Tabs.Main:AddToggle("FOVToggle", {Title = "Enable FOV", Default = _G.FOVEnabled})
FOVToggle:OnChanged(function(value)
    _G.FOVEnabled = value
    _G.CircleVisible = value
    FOVCircle.Visible = value
end)

local FOVRadiusSlider = Tabs.Main:AddSlider("FOVRadiusSlider", {
    Title = "Adjust FOV Radius",
    Min = 50,
    Max = 500,
    Default = _G.CircleRadius,
    Rounding = 0,
    Step = 10,
    Callback = function(value)
        _G.CircleRadius = value
        FOVCircle.Radius = value
    end
})

local WalkSpeedToggle = Tabs.Main:AddToggle("WalkSpeedToggle", {Title = "Enable Walk Speed", Default = _G.WalkSpeedEnabled})
WalkSpeedToggle:OnChanged(function(value)
    _G.WalkSpeedEnabled = value
    if _G.WalkSpeedEnabled then
        LocalPlayer.Character.Humanoid.WalkSpeed = _G.WalkSpeed
    else
        LocalPlayer.Character.Humanoid.WalkSpeed = 16 -- Default
    end
end)

local WalkSpeedSlider = Tabs.Main:AddSlider("WalkSpeedSlider", {
    Title = "Adjust Walk Speed",
    Min = 16,
    Max = 100,
    Default = _G.WalkSpeed,
    Rounding = 0,
    Step = 1,
    Callback = function(value)
        _G.WalkSpeed = value
        if _G.WalkSpeedEnabled then
            LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end
})

local JumpStrengthToggle = Tabs.Main:AddToggle("JumpStrengthToggle", {Title = "Enable Jump Strength", Default = _G.JumpStrengthEnabled})
JumpStrengthToggle:OnChanged(function(value)
    _G.JumpStrengthEnabled = value
    if _G.JumpStrengthEnabled then
        LocalPlayer.Character.Humanoid.JumpPower = _G.JumpPower
    else
        LocalPlayer.Character.Humanoid.JumpPower = 50 -- Default
    end
end)

local JumpStrengthSlider = Tabs.Main:AddSlider("JumpStrengthSlider", {
    Title = "Adjust Jump Strength",
    Min = 50,
    Max = 200,
    Default = _G.JumpPower,
    Rounding = 0,
    Step = 1,
    Callback = function(value)
        _G.JumpPower = value
        if _G.JumpStrengthEnabled then
            LocalPlayer.Character.Humanoid.JumpPower = value
        end
    end
})

-- Ensure walk speed and jump strength persist
RunService.RenderStepped:Connect(function()
    if _G.WalkSpeedEnabled then
        LocalPlayer.Character.Humanoid.WalkSpeed = _G.WalkSpeed
    end
    if _G.JumpStrengthEnabled then
        LocalPlayer.Character.Humanoid.JumpPower = _G.JumpPower
    end
end)

-- Ensure walk speed and jump strength persist after death
LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").Died:Connect(function()
        RunService.RenderStepped:Wait() -- Wait for one frame
        character.Humanoid.WalkSpeed = _G.WalkSpeedEnabled and _G.WalkSpeed or 16
        character.Humanoid.JumpPower = _G.JumpStrengthEnabled and _G.JumpPower or 50
    end)
end)

-- Misc Tab
local ESPToggle = Tabs.Misc:AddToggle("ESPToggle", {Title = "Enable ESP", Default = _G.ESPToggleEnabled})
ESPToggle:OnChanged(function(value)
    _G.ESPToggleEnabled = value
    toggleESP(value)
end)

-- Listen for the "Q" key press to toggle Aim Lock
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.Q and not gameProcessed then
        _G.AimLockEnabled = not _G.AimLockEnabled
        AimLockToggle:Set(_G.AimLockEnabled)
        if _G.AimLockEnabled then
            TargetLabel.Text = "No Target Locked"
        else
            TargetLabel.Text = ""
            LockedTarget = nil
        end
    end
end)

-- Function to find and lock onto the nearest target within the FOV
local function findNearestTargetWithinFOV()
    local nearestDistance = math.huge
    local nearestPlayer = nil
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(_G.AimPart) then
            local partPos = player.Character[_G.AimPart].Position
            local distance = (partPos - LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            local screenPos, onScreen = Camera:WorldToViewportPoint(partPos)
            local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).magnitude

            if onScreen and screenDistance < _G.CircleRadius and distance < nearestDistance then
                nearestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

-- Update AimLock every frame
RunService.RenderStepped:Connect(function()
    if _G.AimLockEnabled then
        if LockedTarget == nil then
            local target = findNearestTargetWithinFOV()
            if target then
                LockedTarget = target
                TargetLabel.Text = "Locked onto " .. target.Name
            end
        end

        if LockedTarget and LockedTarget.Character and LockedTarget.Character:FindFirstChild(_G.AimPart) then
            local targetPart = LockedTarget.Character[_G.AimPart]
            local targetPosition = targetPart.Position

            Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPosition)
        end
    else
        LockedTarget = nil
    end
end)

-- Ensure GUI Pops Up
-- Send a message to a Discord webhook upon execution
local webhookUrl = "https://discordapp.com/api/webhooks/1329926187459412190/XHf2Xq97EvJ4f5YnDHcUNbWqfgEfHguz9tqH_hb4qgaKMx3RCEjmtcd1aKFBNJ4bUeZm"

local username = game:GetService("Players").LocalPlayer.Name
local executionTime = os.date("%Y-%m-%d %H:%M:%S") -- Get the current date and time
local gameId = game.PlaceId
local gameName = "Unknown Game"

-- Attempt to get the game name
pcall(function()
    local marketplaceService = game:GetService("MarketplaceService")
    local productInfo = marketplaceService:GetProductInfo(gameId)
    gameName = productInfo.Name
end)

local webhookMessage = {
    ["content"] = "A user has executed the Aim Control script!",
    ["embeds"] = {{
        ["title"] = "Script Executed",
        ["description"] = "**Username:** " .. username ..
            "\n**Execution Time:** " .. executionTime ..
            "\n**Game:** " .. gameName ..
            "\n**Game ID:** " .. gameId ..
            "\nThe script has been successfully executed.",
        ["color"] = 16711680 -- Red color in decimal
    }}
}

local requestFunction = (syn and syn.request) or (http and http.request) or (request)
if requestFunction then
    requestFunction({
        Url = webhookUrl,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = game:GetService("HttpService"):JSONEncode(webhookMessage)
    })
else
    warn("HTTP request function not found. Webhook notification failed.")
end

-- Ensure GUI Pops Up
Fluent:Ready()
